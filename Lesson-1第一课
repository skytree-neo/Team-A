pragma solidity ^0.4.14;

contract Payroll {
    uint constant payDuration = 10 seconds;

    address owner;
    uint salary;
    address employee;
    uint lastPayday;

    function Payroll() {
        owner = msg.sender;
    }
    
    
  function updateEmployeeAddress(address e) returns(address){
      
         require(msg.sender == owner);
         require (e != 0x0);
         employee = e;
         return employee;
     }
   function updateEmployeeSalary( uint s) returns(uint){
         
         require(msg.sender == owner);
         require (s >= 0);
         salary = s * 1 ether;
         return salary;
     }
    
    function addFund() payable returns (uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
        return this.balance / salary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        require(msg.sender == employee);
        
        uint nextPayday = lastPayday + payDuration;
        assert(nextPayday < now);

        lastPayday = nextPayday;
        employee.transfer(salary);
    }
}
